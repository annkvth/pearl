/* Erzeuger-Verbraucher-Problem (Aufgabe 1)
Aufgabenstellung: 
Erzeuger-Verbraucher-Problem. Ein klassisches Problem der Informatik ist das Erzeuger-Verbraucher-Problem. Hierbei sollen die beteiligten Tasks über eine gemeinsame Datenstruktur kommunizieren. */


! ToDo: counter ?! gemeinsam? variable die Erzeuger identifiziert?

MODULE(VerbraucherErzeuger);
SYSTEM;
  sOut: StdOut;

PROBLEM;
  SPC sOut DATION OUT SYSTEM ALPHIC GLOBAL;
  DCL stdout DATION OUT ALPHIC DIM(*, 80) FORWARD STREAM CREATED(sOut);
  DCL semaStdout SEMA PRESET(1);
  
  DCL semaFrei SEMA PRESET(1);
  DCL semaBelegt SEMA PRESET(0);
  DCL semaMutex SEMA PRESET(1);

! Das maximale Fassungsvermögen der Nachrichten-Queue sei auf 8 Einträge beschränkt.
  DCL maxQueue INV FIXED INIT(8);
! Pearl-Counter starten bei Eins --> von 1 bis 8 
  DCL queue(1:maxQueue) FIXED;

  DCL iSchreiben FIXED INIT(1);
  DCL iLesen FIXED INIT(1);  
  DCL iGesamt FIXED INIT(0);

! die verschiedenen Wartezeiten
! jede 1 Sekunden eine Nachricht
  DCL zeitE DURATION INIT(1.0 SEC);
! Abruf-Zeiten fuer Verbraucher eins und zwei
  DCL zeitV1 DURATION INIT(1.5 SEC);
  DCL zeitV2 DURATION INIT(2.0 SEC);

! Lauf-Variable für While-Loop der Verbraucher
! (soll von Erzeugern reduziert werden wenn sie jeweils fertig sing
  DCL iAktiv FIXED INIT(3);

! lege Prozedur an, um den Code nicht fuer drei Erzeuger dreimal zu kopieren.
! der Parameter nameE dient dazu, beim Loggen den Erzeuger zu identifizieren
! siehe Kurstext: 3.4.4 REF CHAR() als Prozedurparameter
  erzeuge: PROC(nameE REF INV CHAR() IDENT);      
     ! Nach Kurstext Beispiel 5-6:
     ! Schutz eines kritischen Bereichs bei gleichzeitigem
     ! Schutz vor Ueberschreitung einer Speicherkapazitaet
     REQUEST semaFrei, semaMutex;

     ! Logge den aktuellen Zustand bei Aufruf
     REQUEST semaStdout;
     OPEN stdout;
     PUT nameE, ' iSchreiben=', iSchreiben, ': iGesamt=', iGesamt TO stdout BY A, A, F(2), A, F(2), SKIP;
     CLOSE stdout;
     RELEASE semaStdout;

     ! Erhoehe den Counter, der die gesammten Einträge zählt
     iGesamt := iGesamt + 1;
     ! Schreibe diesen Wert als "Nachricht" in die Nachrichten-Queue an den aktuellen Schreib-Index
     queue(iSchreiben) := iGesamt;
     ! Schreibe-Index eins weiter setzen
     iSchreiben := (iSchreiben + 1);
     
     ! Überprüfe auf Überfüllung der Nachrichtenwarteschlange.
     IF ( iSchreiben > maxQueue) THEN
        ! REM Teiler sorgt dafür dass es bei Überlauf vorne weiter geht
        iSchreiben := iSchreiben REM maxQueue;
        REQUEST semaStdout;
        OPEN stdout;
        PUT 'In ', nameE, ': die Nachrichten-Queue war voll.' TO stdout BY A, A, A, SKIP;
        CLOSE stdout;
        RELEASE semaStdout;
     FIN;

     ! Nach Kurstext Beispiel 5-6:
     ! Verlassen des kritischen Bereichs und Information
     ! an Tasks, die auf neue Daten warten
     RELEASE semaMutex, semaBelegt;
  END;


! Prozedur zum Verbrauchen von Nachrichten
! der Parameter numV dient dazu, beim Loggen den Erzeuger zu identifizieren
  verbrauche: PROC(nameV REF INV CHAR() IDENT);      
     DCL item FIXED INIT(0);

     REQUEST semaBelegt, semaMutex;

     item := queue(iLesen);
     REQUEST semaStdout;
     OPEN stdout;
     PUT 'In ', nameV, ' iLesen=', iLesen, ': iGesamt=', iGesamt, ', Queue enthält den Eintrag ', item TO stdout BY A, A, A, F(2), A, F(2), A, F(2), SKIP;
     CLOSE stdout;
     RELEASE semaStdout;

     iLesen := iLesen + 1;
     IF ( iLesen > maxQueue) THEN
        iLesen := 1;
     FIN;

     RELEASE semaMutex, semaFrei;

  END;


! Zum Loggen: definiere Prozedur fuer Warte-Output mit
! Name des aufrufenden Tasks und Wartezeit als Parametern
  loggeWarten: PROC(taskname REF INV CHAR() IDENT, zeit DURATION);
     REQUEST semaStdout;
     OPEN stdout;
     PUT taskname, ' wartet jetzt ', zeit, ' .' TO stdout BY A, A, D(7,1), A, SKIP;
     CLOSE stdout;
     RELEASE semaStdout;   
  END;




!  ------- Die Erzeuger-Tasks -------
! Ein Erzeuger-Task soll solange pro Sekunde je eine Nachricht in eine Nachrichten-Queue schreiben
! (d.h. die erzeuge-Prozedur aufrufen), bis es 10 Nachrichten abgelegt habt
erzeuger1: TASK PRIO 5;
  DCL nameE1 REF CHAR() INIT('Erzeuger-Task 1');
  TO 10 REPEAT;
     CALL erzeuge(nameE1);
     ! Ueberlegung: ist 1 Sekunde warten genau genug?
     ! Schleife mit Verzoegrung wird angfristig vom Sekundentakt abweichen
     ! Aber fur 10 Wiederholungen hoffentlich okay
     ! Alternative wäre die Startbedingung mit AT startzeit+i*zeitE zu setzen
     CALL loggeWarten(nameE1, zeitE);
     AFTER zeitE RESUME;  
  END;
  REQUEST semaStdout;
  OPEN stdout;
  PUT 'In ', nameE1, ' ist der 10er-Loop vorbei.' TO stdout BY A, A, A, SKIP;
  CLOSE stdout;
  RELEASE semaStdout;
  iAktiv := iAktiv -1;
END;

! Zwei weitere Erzeuger - Unterschied ist nur in der Zahl, mit der die erzeuge-Prozedur aufgerufen wird
erzeuger2: TASK PRIO 5;
  DCL nameE2 REF CHAR() INIT('Erzeuger-Task 2');
  TO 10 REPEAT
     CALL erzeuge(nameE2);
     CALL loggeWarten(nameE2, zeitE);
     AFTER zeitE RESUME;  
  END;
  REQUEST semaStdout;
  OPEN stdout;
  PUT 'In ', nameE2, ' ist der 10er-Loop vorbei.' TO stdout BY A, A, A, SKIP;
  CLOSE stdout;
  RELEASE semaStdout;
  iAktiv := iAktiv -1;
END;

erzeuger3: TASK PRIO 5;
  DCL nameE3 REF CHAR() INIT('Erzeuger-Task 3');
  TO 10 REPEAT
     CALL erzeuge(nameE3);
     CALL loggeWarten(nameE3, zeitE);
     AFTER zeitE RESUME;  
  END;
  REQUEST semaStdout;
  OPEN stdout;
  PUT 'In ', nameE3, ' ist der 10er-Loop vorbei.' TO stdout BY A, A, A, SKIP;
  CLOSE stdout;
  RELEASE semaStdout;
  iAktiv := iAktiv -1;
END;


!  ------- Die Verbraucher-Tasks -------
verbraucher1: TASK PRIO 5;
  DCL nameV1 REF CHAR() INIT('Verbraucher-Task 1');
  ! Soll laufen so lange es noch aktive Verbraucher gibt.
  WHILE iAktiv>0 REPEAT
     verbrauche(nameV1);
     CALL loggeWarten(nameV1, zeitV1);
     AFTER zeitV1 RESUME;  
  END;
  REQUEST semaStdout;
  OPEN stdout;
  PUT 'Keine aktiven Erzeuger mehr - ', nameV1, ' beendet sich jetzt.' TO stdout BY A, A, A, SKIP;
  CLOSE stdout;
  RELEASE semaStdout;
END;

verbraucher2: TASK PRIO 5;
  DCL nameV2 REF CHAR() INIT('Verbraucher-Task 2');
  ! Soll laufen so lange es noch aktive Verbraucher gibt.
  WHILE iAktiv>0 REPEAT
     verbrauche(nameV2);
     CALL loggeWarten(nameV2, zeitV2);
     AFTER zeitV2 RESUME;  
  END;
  REQUEST semaStdout;
  OPEN stdout;
  PUT 'Keine aktiven Erzeuger mehr - ', nameV2, ' beendet sich jetzt.' TO stdout BY A, A, A, SKIP;
  CLOSE stdout;
  RELEASE semaStdout;
END;


!  ------- Das Hauptprogramm -------
main: TASK PRIO 1 MAIN;

! Starten Sie drei gleichartige Erzeugertasks
   ACTIVATE erzeuger1;
   ACTIVATE erzeuger2;
   ACTIVATE erzeuger3;

! Starten Sie eine Verbrauchertasks, welche die Nachrichten alle 1.5 s abruft.
   ACTIVATE verbraucher1;
! Starten Sie eine zweite Verbrauchertasks, welche parallel Nachrichten alle 2s abruft.
   ACTIVATE verbraucher2;   


END;

MODEND;

