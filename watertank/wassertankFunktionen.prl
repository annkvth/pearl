!Echtzeitfähige Steuerung eines Wasserspeichers
MODULE(wassertank);


SYSTEM;
stdout: StdOut;
floatswitch: FloatSwitch;
pump: Pump(0);
valve: Valve;
pressure_sensor1: PressureSensor(0);
pressure_sensor2: PressureSensor(1);


PROBLEM;
SPC stdout DATION OUT SYSTEM ALPHIC GLOBAL;
DCL terminal DATION OUT ALPHIC DIM(*,80) FORWARD CREATED(stdout);

SPC floatswitch DATION IN SYSTEM BASIC BIT(1);
DCL schwimmerschalter DATION IN BASIC BIT(1) CREATED(floatswitch);

SPC pump DATION INOUT SYSTEM BASIC FIXED(31);
DCL foerderpumpe DATION INOUT BASIC FIXED(31) CREATED(pump);

SPC valve DATION INOUT SYSTEM BASIC FIXED(15);
DCL ventil DATION INOUT BASIC FIXED(15) CREATED(valve);

SPC pressure_sensor1 DATION IN SYSTEM BASIC FLOAT;
DCL sensor1 DATION IN BASIC FLOAT CREATED(pressure_sensor1);
SPC pressure_sensor2 DATION IN SYSTEM BASIC FLOAT;
DCL sensor2 DATION IN BASIC FLOAT CREATED(pressure_sensor2);

DCL boltFoerderpumpe BOLT;


! Task Druck überwachen
ueberwache_druck_speicher: TASK;
  DCL druck_speicher FLOAT(23);
  druck_speicher := lese_druck2;
END;


! Hilfsfunktion fürs Protokollieren
loggeAktionWert: PROC(aktion REF INV CHAR(), wert FIXED);
  PUT aktion, wert TO terminal BY A,F(8),SKIP;
END;


! Auslesen der Drucksensoren und Rückgabe des gemessenen Drucks
lese_druck1: PROC RETURNS(FLOAT(23));
  DCL druck FLOAT(23);
  OPEN sensor1;
  TAKE druck FROM sensor1;
  CLOSE sensor1;
  loggeAktionWert('Auslesen von Drucksensor 1 (Pumpe/Ventil): ', ENTIER druck);
  RETURN(druck);
END;

lese_druck2: PROC RETURNS(FLOAT(23));
  DCL druck FLOAT(23);
  OPEN sensor2;
  TAKE druck FROM sensor2;
  CLOSE sensor2;
  loggeAktionWert('Auslesen von Drucksensor 2 (Tank): ', ENTIER druck);
  RETURN(druck);
END;


! Status des Ventils auslesen
lese_ventil: PROC RETURNS (FIXED(15));
  DCL v_status FIXED(15);
  DCL status BIT(1);
  OPEN ventil;
  TAKE v_status FROM ventil;
  loggeAktionWert('Auslesen von Ventil-Status: ', v_status);
  CLOSE ventil;
  RETURN(v_status);
END;

! Status des Ventils aendern
schreibe_ventil: PROC (befehl FIXED(15));
  OPEN ventil;
  SEND befehl TO ventil;
  loggeAktionWert('Sende Kommando an Ventil: ', befehl);
  CLOSE ventil;
END;


! Status des Schwimmschalters auslesen
!lese_schwimmerschalter: PROC RETURNS (BIT(1));
 ! DCL status BIT(1);
  !PUT 'WATERTANK: Teste Schwimmerschalter:' TO terminal BY A, SKIP;
  !OPEN schwimmerschalter;
  !TAKE status FROM schwimmerschalter;
  !loggeAktionWert('Auslesen von Drucksensor 2 (Tank): ', TOFIXED status);
  !PUT 'WATERTANK: Schwimmerschalter aktuelle Stellung',status TO terminal BY A,X,B,SKIP;
  !CLOSE schwimmerschalter;
  !RETURN(status);
!END;

lese_schwimmerschalter: PROC RETURNS (BIT(1));
! liest die Schalterstellung des Schwimmerschalters aus
! gibt 0 für einen offenen Schalter zurück
! gibt 1 für einen geschlossenen Schalter zurück --> Überlauf
DCL schalterstellung BIT(1);
TAKE schalterstellung FROM schwimmerschalter;
loggeAktionWert('Auslesen von Schwimmerschalter: ', TOFIXED schalterstellung);
RETURN (schalterstellung);
END;

pumpe_aenderung_rpm: PROC (rpm_soll FIXED) RETURNS (BIT(2)) ;
! ändert die Drehzahl der Pumpe, für rpm_soll = 0 wird sie ausgeschaltet, mit dem Setzen einer Drehzahl wird sie eingeschaltet
! die Drehzahl muss entweder 0 (aus) sein, oder zwischen 100 (Leerlauf) und 2000 (max. Drehzahl) liegen
! nach der Änderung wird die Drehzahl überprüft
! gibt 11 für eine erfolgreiche Änderung der Drehzahl zurück
! gibt 00 für einen unplausiblen Wert zurück
! gibt 01 für eine falsch ausgeführte Änderung

DCL rpm_ist FIXED;
DCL return_value BIT(2);
DCL clock1 CLOCK;
DCL clock2 CLOCK;
DCL dauer DURATION;
DCL pruef1 BIT(1) INIT ('0'B);
DCL prufe2 BIT(1) INIT ('0'B);


IF rpm_soll == 0 OR (rpm_soll >= 100 AND rpm_soll <= 2000) THEN

        RESERVE boltFoerderpumpe;
        OPEN foerderpumpe;
        SEND rpm_soll TO foerderpumpe;
        CLOSE foerderpumpe;
        FREE boltFoerderpumpe;

        clock1 := NOW;
        return_value := '01'B;
        REPEAT
          ENTER boltFoerderpumpe;
          OPEN foerderpumpe;
          TAKE rpm_ist FROM foerderpumpe;
          CLOSE foerderpumpe;
          LEAVE boltFoerderpumpe;

           IF (rpm_ist >=  rpm_soll*0.9) AND (rpm_ist <= rpm_soll*1.1)  THEN
              AFTER 0.5 SEC RESUME;

              ENTER boltFoerderpumpe;
              OPEN foerderpumpe;
              TAKE rpm_ist FROM foerderpumpe;
              CLOSE foerderpumpe;
              LEAVE boltFoerderpumpe;

              IF ( rpm_ist >= rpm_soll*0.9) AND (rpm_ist <= rpm_soll*1.1) THEN                                                                                                                                                               
                 return_value := ('11'B);
                 EXIT;
              FIN;
           FIN;
        clock2 := NOW;
        IF (clock2-clock1 >= 4 SEC) THEN
           EXIT;
        FIN;
        END;
ELSE
        return_value := ('00'B);
FIN;
RETURN (return_value);

END;




lese_pumpe: PROC RETURNS (FIXED);
!liest die Drehzahl der Pumpe aus
!prüft die Plausibilität des Wertes
!gibt 9999 zurück für einen unplausiblen Wert

  DCL return_value FIXED;
  DCL rpm_ist FIXED;

  ENTER boltFoerderpumpe;
  OPEN foerderpumpe;
  TAKE rpm_ist FROM foerderpumpe;
  CLOSE foerderpumpe;
  LEAVE boltFoerderpumpe;

  IF rpm_ist == 0 OR (rpm_ist >= 100 AND rpm_ist <= 2000) THEN
      return_value := rpm_ist;
  ELSE
      return_value := 9999;
  FIN;
  RETURN (return_value);
END;



!! ---------------------------------------------

hauptteil: TASK PRIO 10 MAIN;

  DCL ventil_status FIXED(15);
  DCL ventil_befehl FIXED(15);
  DCL druckPumpe FLOAT(23);
  DCL druckTank FLOAT(23);
  DCL schwimmerStatus BIT(1);
  DCL aenderung_pumpe BIT(2);
  DCL status_schwimmerschalter BIT(1);
  
  OPEN terminal;
  PUT 'Testprogramm für alle DATIONS' TO terminal BY A, SKIP;
  CLOSE terminal;
  
  ! hier die einzelnen Tasks und Funktionen aufrufen ...
  
  !!! BUG! Die Drucksensoren funktionieren nicht richtig, wenn man nicht vorher schon irgendwas anderes gemacht oder lange genug gewartet hat... Oder vielleicht muss einfach nur der schwimmerschalter offen sein?!
  OPEN schwimmerschalter;
  AFTER 5 SEC RESUME;
  
  ventil_status = lese_ventil;
  ventil_befehl = 1;
  schreibe_ventil(ventil_befehl);
  
  ALL 1 SEC DURING 30 SEC ACTIVATE ueberwache_druck_speicher;
  
  druckPumpe = lese_druck1;
  druckTank = lese_druck2;
  
  schwimmerStatus = lese_schwimmerschalter;
  
  
  AFTER 40 SEC RESUME; ! Benötigt, da sonst das Terminal zu früh geschlossen wird.
  
  OPEN terminal;
  PUT 'Ende des Main Tasks' TO terminal BY A, SKIP;
  CLOSE schwimmerschalter;
  CLOSE terminal;
END;

MODEND;
